# using adjacency matrix

def add_node(v):
    global node_count

    if v in nodes:
        print("vertext is already there")

    else:
        node_count += 1
        nodes.append(v)
        for n in graph:  # add column for the new vertex and new row modify each row add 0's in the end
            n.append(0)

        temp = []
        for i in range(node_count):
            temp.append(0)  # add new list for new row of new vertex in the end it will have 0's count = nodecount

        graph.append(temp)


def add_edge(v1, v2):
    if v1 not in nodes:
        print(v1, "is not presnt in graph")
    elif v2 not in nodes:
        print(v2, "is not presnt in graph")
    else:
        index1 = nodes.index(v1)
        index2 = nodes.index(v2)
        graph[index1][index2] = 1
        graph[index2][index1] = 1


def print_graph():
    for i in range(node_count):
        for j in range(node_count):
            print(graph[i][j], end=" ")
        print()

def delete_node(v):
    global node_count
    if v not in nodes:
        print(v,"is not present in graph")

    else:
        index1 = nodes.index(v)
        node_count -=1
        nodes.remove(v)
        graph.pop(index1)
        for i in graph:
            i.pop(index1)



nodes = []
graph = []
node_count = 0
print("before adding nodes")
print(nodes)
print(graph)
add_node("A")
add_node("B")
add_node("C")
add_node("D")
print("after adding nodes")
print(nodes)

add_edge("A","B")
add_edge("A","C")
add_edge("A","D")
add_edge("B","D")
add_edge("B","A")
add_edge("C","D")
add_edge("C","A")
add_edge("D","A")
add_edge("D","B")
add_edge("D","C")
delete_node("B")
print(graph)
print(node_count)
print_graph()
