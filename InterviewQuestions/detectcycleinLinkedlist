
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

#floyds cycle detection algorithm
def hasCycle(head):
    spoint=head
    fpoint=head
    while (spoint!=None and fpoint!=None and fpoint.next!=None):
        spoint=spoint.next
        fpoint=fpoint.next.next
        if spoint==fpoint:

            return 1
    return 0
# # Using hashmap
#         hashmap = {}
#         while head:
#             if head in hashmap.keys():
#                 return head
#             else:
#                 hashmap[head] = 1
#             head = head.next

head = ListNode(3)
node2 = ListNode(2)
node3 = ListNode(0)
node4 = ListNode(-4)

head.next = node2
node2.next = node3
node3.next = node4
node4.next = node2  # Creating a cycle

# Test the cycle detection
if hasCycle(head):
    print("Cycle detected!")
else:
    print("No cycle found.")

